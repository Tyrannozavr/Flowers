import asyncio
import logging
from typing import List
from app.bot import bot
from utils.api import get_orders, get_consultations, get_admin_by_shop_id

TELEGRAM_MESSAGE_LIMIT = 4096

def split_message(message: str, limit: int = TELEGRAM_MESSAGE_LIMIT) -> List[str]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ª–∏–º–∏—Ç."""
    if len(message) <= limit:
        return [message]

    parts = []
    while len(message) > limit:
        split_index = message.rfind("\n", 0, limit)
        if split_index == -1:
            split_index = limit
        parts.append(message[:split_index])
        message = message[split_index:].strip()

    if message:
        parts.append(message)

    return parts

async def send_new_orders():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    while True:
        try:
            orders = await get_orders()
            if orders:
                logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(orders)}")
                
                for order in orders:
                    shop_id = order.get("shop_id")
                    if shop_id:  
                        admin = await get_admin_by_shop_id(shop_id)
                        
                        if admin and admin.get("telegram_ids"):
                            for tg_id in admin["telegram_ids"]:
                                await send_order_message(tg_id, order)
                    else:
                        logging.error(f"–ù–µ—Ç shop_id –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.get('id', 'unknown')}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}")
        
        await asyncio.sleep(60)


async def send_order_message(tg_id: int, order: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –≤ Telegram, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–µ."""
    try:
        message = format_order_message(order)
        parts = split_message(message)
        for part in parts:
            await bot.send_message(chat_id=tg_id, text=part)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–∫–∞–∑–æ–º: {e}")

def format_order_message(order: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–∫–∞–∑ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram."""
    try:
        items = "\n".join(
            [f"- {item.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (x{item.get('quantity', 1)}): {item.get('price', 0)} ‚ÇΩ" for item in order.get("items", [])]
        )
        return (
            f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n"
            f"üÜî ID: {order.get('id', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üë§ –ò–º—è: {order.get('fullName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.get('phoneNumber', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {order.get('recipientName', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {order.get('recipientPhone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üèôÔ∏è –ê–¥—Ä–µ—Å: {order.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}, {order.get('street', '–ù–µ —É–∫–∞–∑–∞–Ω')}, {order.get('house', '–ù–µ —É–∫–∞–∑–∞–Ω')}, "
            f"{order.get('building', '')}, {order.get('apartment', '')}\n"
            f"üöö –ú–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: {order.get('deliveryMethod', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìÖ –î–∞—Ç–∞: {order.get('deliveryDate', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"‚è∞ –í—Ä–µ–º—è: {order.get('deliveryTime', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è: {order.get('wishes', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}\n"
            f"üíå –¢–µ–∫—Å—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∫–µ: {order.get('cardText', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üì¶ –¢–æ–≤–∞—Ä—ã:\n{items}\n"
            f"üü¢ –°—Ç–∞—Ç—É—Å: {order.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ ID: {order.get('id', '–ù–µ —É–∫–∞–∑–∞–Ω')}"

async def send_new_consultations():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    while True:
        try:
            consultations = await get_consultations()
            if consultations:
                logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {len(consultations)}")
                
                for consultation in consultations:
                    shop_id = consultation.get("shop_id")
                    if shop_id:  
                        admin = await get_admin_by_shop_id(shop_id)
                        
                        if admin and admin.get("telegram_ids"):
                            for tg_id in admin["telegram_ids"]:
                                await send_consultation_message(tg_id, consultation)
                    else:
                        logging.error(f"–ù–µ—Ç shop_id –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ {consultation.get('id', 'unknown')}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {e}")
        
        await asyncio.sleep(60)

async def send_consultation_message(tg_id: int, consultation: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ Telegram, —Ä–∞–∑–±–∏–≤–∞—è –µ—ë –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–µ."""
    try:
        message = format_consultation_message(consultation)
        parts = split_message(message)
        for part in parts:
            await bot.send_message(chat_id=tg_id, text=part)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π: {e}")

def format_consultation_message(consultation: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram."""
    try:
        return (
            f"üìù –ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:\n"
            f"üÜî ID: {consultation.get('id', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üë§ –ò–º—è: {consultation.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {consultation.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ID: {consultation.get('id', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
