"""empty message

Revision ID: e72489e18ba8
Revises: bd0a2df59d8e
Create Date: 2025-03-19 16:44:25.114345

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.engine.reflection import Inspector

# revision identifiers, used by Alembic.
revision: str = 'e72489e18ba8'
down_revision: Union[str, None] = 'bd0a2df59d8e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)
    if 'type' not in [col['name'] for col in inspector.get_columns('shop_delivery_cost')]:
        op.add_column('shop_delivery_cost', sa.Column('type', sa.String(), nullable=False))
    if 'fixed_cost' not in [col['name'] for col in inspector.get_columns('shop_delivery_cost')]:
        op.add_column('shop_delivery_cost', sa.Column('fixed_cost', sa.Integer(), nullable=True, comment='Если стоимость доставки фиксированная'))
    if 'radius_cost' not in [col['name'] for col in inspector.get_columns('shop_delivery_cost')]:
        op.add_column('shop_delivery_cost', sa.Column('radius_cost', postgresql.JSON(astext_type=sa.Text()), nullable=True, comment='{радиус до: цена'))
    op.create_unique_constraint(None, 'shop_delivery_cost', ['shop_id'])
    if 'delivery_cost' in [col['name'] for col in inspector.get_columns('shop_delivery_cost')]:
        op.drop_column('shop_delivery_cost', 'delivery_cost')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('shop_delivery_cost', sa.Column('delivery_cost', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'shop_delivery_cost', type_='unique')
    op.drop_column('shop_delivery_cost', 'radius_cost')
    op.drop_column('shop_delivery_cost', 'fixed_cost')
    op.drop_column('shop_delivery_cost', 'type')
    # ### end Alembic commands ###
